{"version":3,"sources":["context/UserContext.js","components/login/LoginScreen.js","hooks/useForm.js","components/ui/Navbar.js","helpers/clasificacion.js","helpers/train.js","hooks/useFectch.js","components/mensualidad/Deudas.js","components/mensualidad/ListMensualidad.js","components/mensualidad/FirstMes.js","components/mensualidad/LastMes.js","components/mensualidad/Mensualidad.js","components/plan/ListPlan.js","components/plan/Planes.js","components/plan/PlanFamiliar.js","components/plan/PrecioPlan.js","components/Servicios/ListPrecioServicios.js","components/Servicios/PrecioServicio.js","components/Servicios/ListServicios.js","components/Servicios/PrecioServicioOne.js","components/Servicios/index.js","components/plan/ServiciosPlan.js","components/plan/ListFamiliares.js","components/plan/ServicioPlanFamiliar.js","components/Servicios/TipoServicio.js","components/chatbot/ChatbotScreen.js","routers/DasboardRoutes.js","routers/AppRouter.js","App.js","index.js"],"names":["UserContext","createContext","LoginScreen","history","setUser","useContext","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","useForm","cedula","password","formValues","handleLogin","e","a","preventDefault","replace","alert","className","onSubmit","type","placeholder","onChange","to","Navbar","activeClassName","exact","clasificacion","user","classifier","natural","LogisticRegressionClassifier","Espa","addDocument","train","getClassifications","classify","useFetch","url","isMounted","useRef","data","loading","error","state","setState","useEffect","current","fetch","then","resp","json","Deudas","memo","style","width","height","role","key","mesesPendiente","opciones","year","month","day","ListMensualidad","nombre","apellido","total","fecha","Date","toLocaleDateString","FirstMes","id","usuario","LastMes","Mensualidad","length","map","v","ListPlan","title","precio","Planes","descripcion","PlanesFamiliares","PrecioPlan","steps","query","console","log","ListPrecioServicios","img","src","alt","PrecioServicio","servicio","ListServicios","precio_vs_servicios","Servicios","tipo_vs_servicios","ServiciosPlan","plan_servicios","ListFamiliares","ServiciosPlanFamiliar","servicios","TipoServicio","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","ChatbotScreen","navigator","onLine","headerTitle","botAvatar","userAvatar","recognitionEnable","floating","recognitionLang","message","trigger","component","options","label","end","DasboardRoutes","path","AppRouter","App","Provider","ReactDOM","render","document","getElementById"],"mappings":"+LAEaA,EAAcC,wBAAc,M,gBCK5BC,G,MAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpBC,EAAYC,qBAAWL,GAAvBI,QADkC,ECLrB,WAAwB,IAAvBE,EAAsB,uDAAP,GAAO,EAChBC,mBAASD,GADO,mBACrCE,EADqC,KAC7BC,EAD6B,KAGtCC,EAAQ,WACZD,EAAUH,IAGNK,EAAoB,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAC3CL,EAAU,2BACLD,GADI,kBAENK,EAAOC,MAIZ,MAAO,CAACN,EAAQG,EAAmBD,GDPKK,CAAQ,CAC9CC,OAAQ,GACRC,SAAU,KAJ8B,mBAEnCC,EAFmC,KAEvBP,EAFuB,KAOlCK,EAAqBE,EAArBF,OAAQC,EAAaC,EAAbD,SAEVE,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDAClBD,EAAEE,kBAEEN,IAAUC,EAHI,gCAIVb,EAAQ,CAAEY,SAAQC,aAJR,OAKhBd,EAAQoB,QAAQ,YALA,sBAOhBC,MAAM,mBAPU,2CAAH,sDAWjB,OACE,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,qCACA,0BAAMC,SAAUP,GACd,yBAAKM,UAAU,cACb,2BACEE,KAAK,OACLF,UAAU,eACVG,YAAY,gBACZf,KAAK,SACLC,MAAOE,EACPa,SAAUlB,KAGd,yBAAKc,UAAU,cACb,2BACEE,KAAK,WACLF,UAAU,eACVG,YAAY,kBACZf,KAAK,WACLC,MAAOG,EACPY,SAAUlB,KAGd,yBAAKc,UAAU,mBACb,2BAAOE,KAAK,SAASF,UAAU,YAAYX,MAAM,WAEnD,yBAAKW,UAAU,cACb,kBAAC,IAAD,CAAMK,GAAG,IAAIL,UAAU,aAAvB,uBAMN,yBAAKA,UAAU,mCACb,iDE9DGM,EAAS,WACpB,OACE,yBAAKN,UAAU,+CACb,kBAAC,IAAD,CAAMA,UAAU,eAAeK,GAAG,YAAlC,WAGA,yBAAKL,UAAU,yDACb,wBAAIA,UAAU,sBACZ,kBAAC,IAAD,CACEO,gBAAgB,SAChBP,UAAU,oBACVQ,OAAK,EACLH,GAAG,KAJL,c,2DCPGI,EAAgB,SAACC,GAE5B,IAAMC,ECDa,WAEnB,IAAMA,EAAa,IAAIC,IAAQC,6BAA6BC,KAoC5D,OA9BAH,EAAWI,YAAY,YAAa,YACpCJ,EAAWI,YACT,yCACA,iBAEFJ,EAAWI,YAAY,qDAAsD,oBAG7EJ,EAAWI,YAAY,SAAU,QACjCJ,EAAWI,YAAY,0BAA2B,WAClDJ,EAAWI,YAAY,yBAA0B,UACjDJ,EAAWI,YAAY,sBAAuB,kBAC9CJ,EAAWI,YAAY,qBAAsB,iBAC7CJ,EAAWI,YAAY,oCAAqC,qBAC5DJ,EAAWI,YACT,uCACA,+BAIFJ,EAAWI,YAAY,iCAAkC,eACzDJ,EAAWI,YAAY,cAAe,eACtCJ,EAAWI,YAAY,iBAAe,eACtCJ,EAAWI,YAAY,+BAAgC,cAGvDJ,EAAWI,YAAY,gCAAiC,OAExDJ,EAAWK,QAEJL,EDrCYK,GAEnB,MAAqD,KAAjDL,EAAWM,mBAAmBP,GAAM,GAAGrB,MAClC,YAGFsB,EAAWO,SAASR,IEThBS,EAAW,SAACC,GACvB,IAAMC,EAAYC,kBAAO,GADM,EAGLxC,mBAAS,CACjCyC,KAAM,KACNC,SAAS,EACTC,MAAO,OANsB,mBAGxBC,EAHwB,KAGjBC,EAHiB,KA4B/B,OAnBAC,qBAAU,WACR,OAAO,WACLP,EAAUQ,SAAU,KAErB,IAEHD,qBAAU,WACRE,MAAMV,GACHW,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACR,GACLF,GACEM,EAAS,CACPH,SAAS,EACTC,MAAO,KACPF,cAGP,IAEIG,GCSMQ,EAnCAC,gBAAK,WAAO,IACjBzB,EAAS9B,qBAAWL,GAApBmC,KAEFU,EAAG,+DAA2DV,EAAKnB,QAHjD,EAIE4B,EAASC,GAA3BI,EAJgB,EAIhBA,QAASD,EAJO,EAIPA,KACjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACb,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAIJ,wBAAIA,UAAU,+BACZ,wBAAIwC,IAAI,SAASxC,UAAU,mBACzB,2CAEF,wBAAIwC,IAAI,iBAAiBxC,UAAU,mBACjC,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eAAd,iCACiCuB,EAAKkB,uBC5B9CC,EAAW,CACfC,KAAM,UACNC,MAAO,UACPC,IAAK,WAGMC,EAAkBX,gBAAK,YAAyC,IAAtCY,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAE9D,OADAA,EAAQ,IAAIC,KAAKD,GAAOE,mBAAmB,QAASV,GAElD,yBAAK1C,UAAU,QACb,wBAAIA,UAAU,eAAd,YACY+C,EADZ,IACqBC,GAErB,yBAAKhD,UAAU,aACb,wBAAIA,UAAU,eAAd,UAAoCiD,GACpC,wBAAIjD,UAAU,eAAd,UAAoCkD,QC2C7BG,EAtDElB,gBAAK,WAAO,IACnBzB,EAAS9B,qBAAWL,GAApBmC,KAEFU,EAAG,sEAAkEV,EAAKnB,QAHtD,EAIA4B,EAASC,GAA3BI,EAJkB,EAIlBA,QAASD,EAJS,EAITA,KAEjB,OACE,oCACGC,EACA,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGCuB,EAAKA,KACP,wBAAIvB,UAAU,+BACZ,wBAAIwC,IAAI,WAAWxC,UAAU,mBAC3B,kDAGA,WAAO,IAAD,EAMFuB,EAAKA,KAJP+B,EAFI,EAEJA,GACAL,EAHI,EAGJA,MACAC,EAJI,EAIJA,MAJI,IAKJK,QAAWR,EALP,EAKOA,OAAQC,EALf,EAKeA,SAErB,OACE,wBAAIR,IAAKc,EAAItD,UAAU,mBACrB,kBAAC8C,EAAD,CACEG,MAAOA,EACPC,MAAOA,EACPH,OAAQA,EACRC,SAAUA,KAbhB,IAoBJ,wBAAIhD,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,8DCOGwD,EArDCrB,gBAAK,WAAO,IAClBzB,EAAS9B,qBAAWL,GAApBmC,KAEFU,EAAG,sEAAkEV,EAAKnB,QAHvD,EAIC4B,EAASC,GAA3BI,EAJiB,EAIjBA,QAASD,EAJQ,EAIRA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KACP,wBAAIvB,UAAU,+BACZ,wBAAIwC,IAAI,UAAUxC,UAAU,mBAC1B,kDAEA,WAAO,IAAD,EAMFuB,EAAKA,KAJP+B,EAFI,EAEJA,GACAL,EAHI,EAGJA,MACAC,EAJI,EAIJA,MAJI,IAKJK,QAAWR,EALP,EAKOA,OAAQC,EALf,EAKeA,SAErB,OACE,wBAAIR,IAAKc,EAAItD,UAAU,mBACrB,kBAAC8C,EAAD,CACEG,MAAOA,EACPC,MAAOA,EACPH,OAAQA,EACRC,SAAUA,KAbhB,IAoBJ,wBAAIhD,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,8DCSGyD,EAtDKtB,gBAAK,WAAO,IACtBzB,EAAS9B,qBAAWL,GAApBmC,KAEFU,EAAG,+DAA2DV,EAAKnB,QAH5C,EAIH4B,EAASC,GAA3BI,EAJqB,EAIrBA,QAASD,EAJY,EAIZA,KACjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACb,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGFuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,cAAcxC,UAAU,mBAC9B,4CAGDuB,EAAKA,KAAKoC,KAAI,SAACC,GAAO,IAEnBN,EAIEM,EAJFN,GACAL,EAGEW,EAHFX,MACAC,EAEEU,EAFFV,MAJkB,EAMhBU,EADFL,QAAWR,EALO,EAKPA,OAAQC,EALD,EAKCA,SAGrB,OACE,wBAAIR,IAAKc,EAAItD,UAAU,mBACrB,kBAAC8C,EAAD,CACEG,MAAOA,EACPC,MAAOA,EACPH,OAAQA,EACRC,SAAUA,SAOpB,wBAAIhD,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,8DCjDC6D,EAAW1B,gBAAK,YAAwB,IAArB2B,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACrC,OACE,yBAAK/D,UAAU,QACb,wBAAIA,UAAU,eAAe8D,GAC7B,yBAAK9D,UAAU,aACb,wBAAIA,UAAU,eAAd,WAAqC+D,QCuC9BC,EA1CA7B,gBAAK,WAClB,IADwB,EAEEhB,EADjB,iDACDK,EAFgB,EAEhBA,QAASD,EAFO,EAEPA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,SAASxC,UAAU,mBACzB,uCAEDuB,EAAKA,KAAKoC,KAAI,SAACC,GAAO,IACbN,EAA4BM,EAA5BN,GAAIW,EAAwBL,EAAxBK,YAAaF,EAAWH,EAAXG,OAEzB,OACE,wBAAIvB,IAAKc,EAAItD,UAAU,mBACrB,kBAAC6D,EAAD,CAAUC,MAAOG,EAAaF,OAAQA,SAM9C,wBAAI/D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,+DCQGkE,EA1CU/B,gBAAK,WAC5B,IADkC,EAERhB,EADjB,0DACDK,EAF0B,EAE1BA,QAASD,EAFiB,EAEjBA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,SAASxC,UAAU,mBACzB,kDAEDuB,EAAKA,KAAKoC,KAAI,SAACC,GAAO,IACbN,EAA4BM,EAA5BN,GAAIW,EAAwBL,EAAxBK,YAAaF,EAAWH,EAAXG,OAEzB,OACE,wBAAIvB,IAAKc,EAAItD,UAAU,mBACrB,kBAAC6D,EAAD,CAAUC,MAAOG,EAAaF,OAAQA,SAM9C,wBAAI/D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,0ECYGmE,EA7CIhC,gBAAK,YAIjB,IAFQ9C,EAET,EAHJ+E,MACEb,QAAWlE,MAGPgF,EAAQ5D,EAAcpB,GACtB+B,EAAG,wDAAoDiD,GAC7DC,QAAQC,IAAInD,GAHR,MAIsBD,EAASC,GAA3BI,EAJJ,EAIIA,QAASD,EAJb,EAIaA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,OAAOxC,UAAU,mBACvB,sDAAwBuB,EAAKA,KAAK,GAAG0C,eAEvC,wBAAIzB,IAAKjB,EAAKA,KAAK+B,GAAItD,UAAU,mBAC/B,kBAAC6D,EAAD,CACEC,MAAOvC,EAAKA,KAAK,GAAG0C,YACpBF,OAAQxC,EAAKA,KAAK,GAAGwC,WAK3B,wBAAI/D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,+DCxCCwE,EAAsBrC,gBAAK,YAA6B,IAA1B2B,EAAyB,EAAzBA,MAAOW,EAAkB,EAAlBA,IAAKV,EAAa,EAAbA,OACrD,OACE,yBAAK/D,UAAU,QACb,wBAAIA,UAAU,eAAe8D,GAC7B,wBAAI9D,UAAU,eAAd,WAAqC+D,GACrC,yBAAK/D,UAAU,aACb,yBAAK0E,IAAKD,EAAKzE,UAAU,WAAW2E,IAAKb,SC6ClCc,EAjDQzC,gBAAK,WAC1B,IADgC,EAENhB,EADjB,mDACDK,EAFwB,EAExBA,QAASD,EAFe,EAEfA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,oDAEDuB,EAAKA,KAAKoC,KAAI,SAACC,GAAO,IAEnBN,EAGEM,EAHFN,GACAS,EAEEH,EAFFG,OAHkB,EAKhBH,EADFiB,SAAYZ,EAJM,EAINA,YAAaQ,EAJP,EAIOA,IAE3B,OACE,wBAAIjC,IAAKc,EAAItD,UAAU,mBACrB,kBAACwE,EAAD,CACEV,MAAOG,EACPQ,IAAKA,EACLV,OAAQA,SAOlB,wBAAI/D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,kEC3CC8E,GCGa3C,gBAAK,YAIxB,IAFQ9C,EAET,EAHJ+E,MACEb,QAAWlE,MAGPgF,EAAQ5D,EAAcpB,GACtB+B,EAAG,0DAAsDiD,GAF3D,EAGsBlD,EAASC,GAA3BI,EAHJ,EAGIA,QAASD,EAHb,EAGaA,KACjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,yCAAeuB,EAAKA,KAAK,GAAG0C,cAE7B1C,EAAKA,KAAKoC,KAAI,SAACC,GAAO,IACbN,EAAyBM,EAAzBN,GAAIW,EAAqBL,EAArBK,YAAaQ,EAAQb,EAARa,IACzB,OACE,wBAAIjC,IAAKc,EAAItD,UAAU,mBACrB,kBAACwE,EAAD,CACEV,MAAOG,EACPQ,IAAKA,EACLV,OAAQH,EAAEmB,oBAAoB,GAAGhB,cAO3C,wBAAI/D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,6FD5CiBmC,gBAAK,YAAqB,IAAlB2B,EAAiB,EAAjBA,MAAOW,EAAU,EAAVA,IAC1C,OACE,yBAAKzE,UAAU,QACb,wBAAIA,UAAU,eAAe8D,GAC7B,yBAAK9D,UAAU,aACb,yBAAK0E,IAAKD,EAAKzE,UAAU,WAAW2E,IAAKb,UE0ClCkB,EA7CG7C,gBAAK,WACrB,IAD2B,EAEDhB,EADjB,qDACDK,EAFmB,EAEnBA,QAASD,EAFU,EAEVA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,0CAGDuB,EAAKA,KAAK,GAAG0D,kBAAkBtB,KAAI,SAACC,GAAO,IAAD,EAGrCA,EADFiB,SAAYvB,EAF2B,EAE3BA,GAAIW,EAFuB,EAEvBA,YAAaQ,EAFU,EAEVA,IAG/B,OACE,wBAAIjC,IAAKc,EAAItD,UAAU,mBACrB,kBAAC8E,EAAD,CAAehB,MAAOG,EAAaQ,IAAKA,SAMhD,wBAAIzE,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,kECcGkF,EAlDO/C,gBAAK,YAIpB,IAFQ9C,EAET,EAHJ+E,MACEb,QAAWlE,MAGPgF,EAAQ5D,EAAcpB,GACtB+B,EAAG,wDAAoDiD,GAFzD,EAGsBlD,EAASC,GAA3BI,EAHJ,EAGIA,QAASD,EAHb,EAGaA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,4CAAcqE,EAAd,iBAA4B9C,EAAKA,KAAK,GAAGwC,SAAe,IACxD,sDAEDxC,EAAKA,KAAK,GAAG4D,eAAexB,KAAI,SAACC,GAAO,IAErCN,EAEEM,EAFFN,GAFoC,EAIlCM,EADFiB,SAAYZ,EAHwB,EAGxBA,YAAaQ,EAHW,EAGXA,IAE3B,OACE,wBAAIjC,IAAKc,EAAItD,UAAU,mBACrB,kBAAC8E,EAAD,CAAehB,MAAOG,EAAaQ,IAAKA,SAMhD,wBAAIzE,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,+DC7CCoF,EAAiBjD,gBAAK,YAAgB,IAAb2B,EAAY,EAAZA,MACpC,OACE,yBAAK9D,UAAU,QACb,wBAAIA,UAAU,eAAe8D,OCmDpBuB,EApDelD,gBAAK,WACjC,IADuC,EAEbhB,EADjB,mEACDK,EAF+B,EAE/BA,QAASD,EAFsB,EAEtBA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,kDAGDuB,EAAKA,KAAKoC,KAAI,SAAC2B,GACd,OACE,yBAAK9C,IAAK8C,EAAUhC,GAAItD,UAAU,aAChC,wBAAIA,UAAU,eAAesF,EAAUrB,aACtCqB,EAAUH,eAAexB,KAAI,SAACkB,GAAc,IAEzCvB,EAEEuB,EAFFvB,GACYW,EACVY,EADFA,SAAYZ,YAEd,OACE,wBAAIzB,IAAKc,EAAItD,UAAU,mBACrB,kBAACoF,EAAD,CAAgBtB,MAAOG,aASrC,wBAAIjE,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,0ECMGuF,EAjDMpD,gBAAK,YAInB,IAFQ9C,EAET,EAHJ+E,MACEb,QAAWlE,MAGPgF,EAAQ5D,EAAcpB,GACtB+B,EAAG,4DAAwDiD,GAF7D,EAGsBlD,EAASC,GAA3BI,EAHJ,EAGIA,QAASD,EAHb,EAGaA,KAEjB,OACE,oCACGC,EACC,yBAAKxB,UAAU,eACf,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAGAuB,EAAKA,KAAKmC,OACZ,wBAAI1D,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,gDAAkBqE,KAEnB9C,EAAKA,KAAK,GAAG0D,kBAAkBtB,KAAI,SAACC,GAAO,IAExCN,EAEEM,EAFFN,GAFuC,EAIrCM,EADFiB,SAAYZ,EAH2B,EAG3BA,YAAaQ,EAHc,EAGdA,IAE3B,OACE,wBAAIjC,IAAKc,EAAItD,UAAU,mBACrB,kBAAC8E,EAAD,CAAehB,MAAOG,EAAaQ,IAAKA,SAMhD,wBAAIzE,UAAU,+BACZ,wBAAIwC,IAAI,YAAYxC,UAAU,mBAC5B,+ECxBNwF,EAAQ,CACZC,WAAY,UACZC,WAAY,WACZC,cAAe,UACfC,gBAAiB,OACjBC,eAAgB,OAChBC,eAAgB,UAChBC,aAAc,OACdC,gBAAiB,UACjBC,cAAe,QAGJC,EAAgB,WAAM,IAGvB3G,EACNX,qBAAWL,GADbmC,KAAQnB,OAGJ6B,EAAG,2DAAuD7B,GAN/B,EAOP4B,EAASC,GAA3BI,EAPyB,EAOzBA,QAASD,EAPgB,EAOhBA,KAEjB,OAEE,kBAAC,gBAAD,CAAeiE,MAAOA,GAEnBhE,EACC,yBAAKxB,UAAU,eACb,yBACEA,UAAU,8BACVoC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCC,KAAK,UAEL,0BAAMvC,UAAU,WAAhB,gBAIDmG,UAAUC,OAMb,kBAAC,IAAD,CACEC,YAAY,sBACZlG,YAAY,qBACZmG,UAAU,kFACVC,WAAW,yFACXC,mBAAmB,EACnBC,UAAU,EACVC,gBAAgB,KAEhBtC,MAAO,CACL,CACEd,GAAI,IACJqD,QAAQ,SAAD,OAAWpF,EAAKA,KAAKwB,OAArB,YAA+BxB,EAAKA,KAAKyB,SAAzC,oCACP4D,QAAS,WAEX,CAEEtD,GAAI,UACJ5C,MAAM,EACNkG,QAAS,gBAAGvH,EAAH,EAAGA,MAAH,EAAU+E,MAAV,OAAsB3D,EAAcpB,KAE/C,CAEEiE,GAAI,WACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,gBACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,OACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,UACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,SACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,iBACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,gBACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,oBACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,8BACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,mBACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,cACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,cACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,cACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,aACJuD,UAAW,kBAAC,EAAD,MACXD,QAAS,eAEX,CAEEtD,GAAI,YACJqD,QACE,8GACFC,QAAS,aAEX,CACEtD,GAAI,YACJqD,QACE,6DACFC,QAAS,eAEX,CAEEtD,GAAI,cACJwD,QAAS,CACP,CAAEzH,MAAO,EAAG0H,MAAO,WAAYH,QAAS,YACxC,CAAEvH,MAAO,EAAG0H,MAAO,SAAUH,QAAS,QACtC,CACEvH,MAAO,EACP0H,MAAO,0BACPH,QAAS,oBAEX,CACEvH,MAAO,EACP0H,MAAO,oBACPH,QAAS,qBAEX,CAAEvH,MAAO,EAAG0H,MAAO,mBAAoBH,QAAS,eAChD,CAAEvH,MAAO,EAAG0H,MAAO,mBAAoBH,QAAS,QAChD,CAAEvH,MAAO,EAAG0H,MAAO,wBAAyBH,QAAS,SAGzD,CACEtD,GAAI,cACJqD,QAAS,oCACTC,QAAS,WAEX,CACEtD,GAAI,OACJqD,QAAS,8CACTC,QAAS,WAEX,CAEEtD,GAAI,MACJqD,QAAS,uBACTK,KAAK,MA9JX,yBAAKhH,UAAU,qBAAqBuC,KAAK,SAAzC,mCCtDK0E,EAAiB,WAC5B,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKjH,UAAU,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAAC0G,KAAK,WAAWL,UAAWX,IACxC,kBAAC,IAAD,CAAU7F,GAAG,UCNV8G,EAAY,WACvB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO3G,OAAK,EAAC0G,KAAK,IAAIL,UAAWpI,IACjC,kBAAC,IAAD,CAAOyI,KAAK,WAAWL,UAAWI,QCR/BG,EAAM,WAAO,IAAD,EACCtI,mBAAS,CAC/BS,OAAQ,cACRC,SAAU,aAHW,mBAChBkB,EADgB,KACV/B,EADU,KAMvB,OACE,kBAACJ,EAAY8I,SAAb,CAAsBhI,MAAO,CAAEqB,OAAM/B,YACnC,kBAAC,EAAD,QCRN2I,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1822a7dc.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const UserContext = createContext(null);\r\n","import React, { useContext } from \"react\";\r\nimport { UserContext } from \"../../context/UserContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useForm } from \"../../hooks/useForm\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport const LoginScreen = ({ history }) => {\r\n  const { setUser } = useContext(UserContext);\r\n  const [formValues, handleInputChange] = useForm({\r\n    cedula: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const { cedula, password } = formValues;\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (cedula && password) {\r\n      await setUser({ cedula, password });\r\n      history.replace(\"/chatbot\");\r\n    } else {\r\n      alert(\"error en campos\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container login-container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 login-form-1\">\r\n          <h3>LOGIN</h3>\r\n          <form onSubmit={handleLogin}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Your Cedula *\"\r\n                name=\"cedula\"\r\n                value={cedula}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                placeholder=\"Your Password *\"\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group mt-4\">\r\n              <input type=\"submit\" className=\"btnSubmit\" value=\"Login\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <Link to=\"#\" className=\"ForgetPwd\">\r\n                Forget Password?\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"col-md-6 login-form-2 container\">\r\n          <h3>BIENVENIDO!!</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = (initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  const reset = () => {\r\n    setValues(initialState);\r\n  };\r\n\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return [values, handleInputChange, reset];\r\n};\r\n","import React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nexport const Navbar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n      <Link className=\"navbar-brand\" to=\"/chatbot\">\r\n        ChatBot\r\n      </Link>\r\n      <div className=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <NavLink\r\n            activeClassName=\"active\"\r\n            className=\"nav-item nav-link\"\r\n            exact\r\n            to=\"/\"\r\n          >\r\n            Logout\r\n          </NavLink>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","// Importacion de la funcion de entrenamiento\r\nimport { train } from \"./train\";\r\n// Funcion que devuelve la clave basada en lo que el usuario escriba\r\nexport const clasificacion = (user) => {\r\n  //Asignando la clasificacion que devuelve la funcion de entrenamiento\r\n  const classifier = train();\r\n  // En caso de que los valores despues de ser evaluado sean igual a 0.5 eso dice que no existe esa clasificacion\r\n  if (classifier.getClassifications(user)[0].value === 0.5) {\r\n    return \"no-existe\";\r\n  }\r\n  // Retorna la clave a la cual el chatBot va a responder\r\n  return classifier.classify(user);\r\n};\r\n","// Importaciones de la libreria natural la cual se basa en procesamiento de lenguaje natural.\r\nimport natural from \"natural\";\r\nimport Espa from \"../../node_modules/natural/lib/natural/stemmers/porter_stemmer_es\";\r\n// Esta funcion devuelve la clasificacion luego del modelo ser entrenado\r\nexport const train = () => {\r\n  // Estoy haciendo la instancia al metodo de regresion logistica y le paso el idioma español por parametro\r\n  const classifier = new natural.LogisticRegressionClassifier(Espa);\r\n\r\n  // Agregando las posibles entrada para saber que clave devolver\r\n\r\n  //----- Preguntas Generales\r\n\r\n  classifier.addDocument(\"servicios\", \"servicio\");\r\n  classifier.addDocument(\r\n    \"servicios individuales o independiente\",\r\n    \"independiente\"\r\n  );\r\n  classifier.addDocument(\"precio de cada servicio o precios de los servicios\", \"precio-servicios\");\r\n\r\n  //planes y sus servicios\r\n  classifier.addDocument(\"planes\", \"plan\");\r\n  classifier.addDocument(\"servicios  plan premium\", \"premium\");\r\n  classifier.addDocument(\"servicios  plan basico\", \"basico\");\r\n  classifier.addDocument(\"precio plan premium\", \"precio/premium\");\r\n  classifier.addDocument(\"precio plan basico\", \"precio/basico\");\r\n  classifier.addDocument(\"plan familiar o planes familiares\", \"planes-familiares\");\r\n  classifier.addDocument(\r\n    \"servicios plan familiar o familiares\",\r\n    \"planes-familiares-servicios\"\r\n  );\r\n\r\n  //pagos y movimientos\r\n  classifier.addDocument(\"movimientos o pagos realizados\", \"movimientos\");\r\n  classifier.addDocument(\"primer pago\", \"primer-pago\");\r\n  classifier.addDocument(\"último pago\", \"ultimo-pago\");\r\n  classifier.addDocument(\"meses debo o tengo pendiente\", \"meses-pago\");\r\n\r\n  // Salir\r\n  classifier.addDocument(\"Salir o terminar conversacion\", \"end\");\r\n  // Aqui entreno mi modelo para que este listo para responder cualquier pregunta del usuario\r\n  classifier.train();\r\n  //Devuelve la variable classifier que tiene el entrenamiento para saber que responder\r\n  return classifier;\r\n};\r\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nexport const useFetch = (url) => {\r\n  const isMounted = useRef(true);\r\n\r\n  const [state, setState] = useState({\r\n    data: null,\r\n    loading: true,\r\n    error: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        isMounted &&\r\n          setState({\r\n            loading: false,\r\n            error: null,\r\n            data,\r\n          });\r\n      });\r\n  }, []);\r\n\r\n  return state;\r\n};\r\n","import React, { useContext, memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { UserContext } from \"../../context/UserContext\";\r\n\r\nconst Deudas = memo(() => {\r\n  const { user } = useContext(UserContext);\r\n\r\n  const url = `https://pruebachatbots.herokuapp.com/api/mensualidad/${user.cedula}`;\r\n  const { loading, data } = useFetch(url);\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            style={{ width: \"3rem\", height: \"3rem\" }}\r\n            role=\"status\"\r\n          >\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"Deudas\" className=\"list-group-item\">\r\n            <h3>Pendientes</h3>\r\n          </li>\r\n          <li key=\"MesesPendiente\" className=\"list-group-item\">\r\n            <div className=\"card\">\r\n              <h5 className=\"card-header\">\r\n                Cantidad de meses pendientes: {data.mesesPendiente}\r\n              </h5>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Deudas;\r\n","import React, { memo } from \"react\";\r\nconst opciones = {\r\n  year: \"numeric\",\r\n  month: \"2-digit\",\r\n  day: \"2-digit\",\r\n};\r\n\r\nexport const ListMensualidad = memo(({ nombre, apellido, total, fecha }) => {\r\n  fecha = new Date(fecha).toLocaleDateString(\"es-Es\", opciones);\r\n  return (\r\n    <div className=\"card\">\r\n      <h5 className=\"card-header\">\r\n        Cliente: {nombre} {apellido}\r\n      </h5>\r\n      <div className=\"card-body\">\r\n        <h6 className=\"card-header\">Total: {total}</h6>\r\n        <h6 className=\"card-header\">Fecha: {fecha}</h6>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useContext, memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListMensualidad } from \"./ListMensualidad\";\r\nimport { UserContext } from \"../../context/UserContext\";\r\n\r\nconst FirstMes = memo(() => {\r\n  const { user } = useContext(UserContext);\r\n\r\n  const url = `https://pruebachatbots.herokuapp.com/api/mensualidad/primer/${user.cedula}`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n       <div className=\"text-center\">\r\n       <div\r\n         className=\"spinner-border text-primary\"\r\n         style={{ width: \"3rem\", height: \"3rem\" }}\r\n         role=\"status\"\r\n       >\r\n         <span className=\"sr-only\">Loading...</span>\r\n       </div>\r\n     </div>\r\n      ) : data.data ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"FirstMes\" className=\"list-group-item\">\r\n            <h3>Primer mes Pagado</h3>\r\n          </li>\r\n\r\n          {(() => {\r\n            const {\r\n              id,\r\n              total,\r\n              fecha,\r\n              usuario: { nombre, apellido },\r\n            } = data.data;\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListMensualidad\r\n                  total={total}\r\n                  fecha={fecha}\r\n                  nombre={nombre}\r\n                  apellido={apellido}\r\n                />\r\n              </li>\r\n            );\r\n          })()}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay pagos disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default FirstMes;\r\n","import React, { useContext, memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListMensualidad } from \"./ListMensualidad\";\r\nimport { UserContext } from \"../../context/UserContext\";\r\n\r\nconst LastMes = memo(() => {\r\n  const { user } = useContext(UserContext);\r\n\r\n  const url = `https://pruebachatbots.herokuapp.com/api/mensualidad/ultimo/${user.cedula}`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"LastMes\" className=\"list-group-item\">\r\n            <h3>Ultimo mes Pagado</h3>\r\n          </li>\r\n          {(() => {\r\n            const {\r\n              id,\r\n              total,\r\n              fecha,\r\n              usuario: { nombre, apellido },\r\n            } = data.data;\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListMensualidad\r\n                  total={total}\r\n                  fecha={fecha}\r\n                  nombre={nombre}\r\n                  apellido={apellido}\r\n                />\r\n              </li>\r\n            );\r\n          })()}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay pagos disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default LastMes;\r\n","import React, { useContext, memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListMensualidad } from \"./ListMensualidad\";\r\nimport { UserContext } from \"../../context/UserContext\";\r\n\r\nconst Mensualidad = memo(() => {\r\n  const { user } = useContext(UserContext);\r\n\r\n  const url = `https://pruebachatbots.herokuapp.com/api/mensualidad/${user.cedula}`;\r\n  const { loading, data } = useFetch(url);\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            style={{ width: \"3rem\", height: \"3rem\" }}\r\n            role=\"status\"\r\n          >\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"Mensualidad\" className=\"list-group-item\">\r\n            <h3>Mensualidad</h3>\r\n          </li>\r\n\r\n          {data.data.map((v) => {\r\n            const {\r\n              id,\r\n              total,\r\n              fecha,\r\n              usuario: { nombre, apellido },\r\n            } = v;\r\n\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListMensualidad\r\n                  total={total}\r\n                  fecha={fecha}\r\n                  nombre={nombre}\r\n                  apellido={apellido}\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay pagos disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Mensualidad;\r\n","import React, { memo } from \"react\";\r\n\r\nexport const ListPlan = memo(({ title, precio }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h5 className=\"card-header\">{title}</h5>\r\n      <div className=\"card-body\">\r\n        <h6 className=\"card-header\">Precio: {precio}</h6>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListPlan } from \"./ListPlan\";\r\n\r\nconst Planes = memo(() => {\r\n  const url = `https://pruebachatbots.herokuapp.com/api/plan`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"Planes\" className=\"list-group-item\">\r\n            <h3>Planes</h3>\r\n          </li>\r\n          {data.data.map((v) => {\r\n            const { id, descripcion, precio } = v;\r\n\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListPlan title={descripcion} precio={precio} />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay planes disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Planes;\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListPlan } from \"./ListPlan\";\r\n\r\nconst PlanesFamiliares = memo(() => {\r\n  const url = `https://pruebachatbots.herokuapp.com/api/plan/familiar`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"Planes\" className=\"list-group-item\">\r\n            <h3>Planes Familiares</h3>\r\n          </li>\r\n          {data.data.map((v) => {\r\n            const { id, descripcion, precio } = v;\r\n\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListPlan title={descripcion} precio={precio} />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay planes familiares disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PlanesFamiliares;\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListPlan } from \"./ListPlan\";\r\nimport { clasificacion } from \"../../helpers/clasificacion\";\r\n\r\nconst PrecioPlan = memo(({\r\n  steps: {\r\n    usuario: { value },\r\n  },\r\n}) => {\r\n  const query = clasificacion(value);\r\n  const url = `https://pruebachatbots.herokuapp.com/api/plan/${query}`;\r\n  console.log(url);\r\n  const { loading, data } = useFetch(url);\r\n  \r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"Plan\" className=\"list-group-item\">\r\n            <h3>{`Precio del plan ${data.data[0].descripcion}`}</h3>\r\n          </li>\r\n          <li key={data.data.id} className=\"list-group-item\">\r\n            <ListPlan\r\n              title={data.data[0].descripcion}\r\n              precio={data.data[0].precio}\r\n            />\r\n          </li>\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay planes disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PrecioPlan;\r\n","import React, { memo } from \"react\";\r\n\r\nexport const ListPrecioServicios = memo(({ title, img, precio }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h5 className=\"card-header\">{title}</h5>\r\n      <h6 className=\"card-header\">Precio: {precio}</h6>\r\n      <div className=\"card-body\">\r\n        <img src={img} className=\"card-img\" alt={title} />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListPrecioServicios } from \"./ListPrecioServicios\";\r\n\r\nconst PrecioServicio = memo(() => {\r\n  const url = `https://pruebachatbots.herokuapp.com/api/precio`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>Precio por servicio</h3>\r\n          </li>\r\n          {data.data.map((v) => {\r\n            const {\r\n              id,\r\n              precio,\r\n              servicio: { descripcion, img },\r\n            } = v;\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListPrecioServicios\r\n                  title={descripcion}\r\n                  img={img}\r\n                  precio={precio}\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay servicios disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PrecioServicio;\r\n","import React, { memo } from \"react\";\r\n\r\nexport const ListServicios = memo(({ title, img }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h5 className=\"card-header\">{title}</h5>\r\n      <div className=\"card-body\">\r\n        <img src={img} className=\"card-img\" alt={title} />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListPrecioServicios } from \"./ListPrecioServicios\";\r\nimport { clasificacion } from \"../../helpers/clasificacion\";\r\n\r\nconst PrecioServicioOne = memo(({\r\n  steps: {\r\n    usuario: { value },\r\n  },\r\n}) => {\r\n  const query = clasificacion(value);\r\n  const url = `https://pruebachatbots.herokuapp.com/api/precio/${query}`;\r\n  const { loading, data } = useFetch(url);\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>Servicio: {data.data[0].descripcion}</h3>\r\n          </li>\r\n          {data.data.map((v) => {\r\n            const { id, descripcion, img } = v;\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListPrecioServicios\r\n                  title={descripcion}\r\n                  img={img}\r\n                  precio={v.precio_vs_servicios[0].precio}\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>Este servicio no es un servicio que se vende individual</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PrecioServicioOne;\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListServicios } from \"./ListServicios\";\r\n\r\nconst Servicios = memo(() => {\r\n  const url = `https://pruebachatbots.herokuapp.com/api/servicio`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>Servicios</h3>\r\n          </li>\r\n\r\n          {data.data[0].tipo_vs_servicios.map((v) => {\r\n            const {\r\n              servicio: { id, descripcion, img },\r\n            } = v;\r\n\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListServicios title={descripcion} img={img} />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay servicios disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Servicios;\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListServicios } from \"../Servicios/ListServicios\";\r\nimport { clasificacion } from \"../../helpers/clasificacion\";\r\n\r\nconst ServiciosPlan = memo(({\r\n  steps: {\r\n    usuario: { value },\r\n  },\r\n}) => {\r\n  const query = clasificacion(value);\r\n  const url = `https://pruebachatbots.herokuapp.com/api/plan/${query}`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h5>{` Plan ${query}: RD$ ${data.data[0].precio}`}</h5>{\" \"}\r\n            <h6>{`Servicios ofrecidos: `}</h6>\r\n          </li>\r\n          {data.data[0].plan_servicios.map((v) => {\r\n            const {\r\n              id,\r\n              servicio: { descripcion, img },\r\n            } = v;\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListServicios title={descripcion} img={img} />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay planes disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default ServiciosPlan;\r\n","import React, { memo } from \"react\";\r\n\r\nexport const ListFamiliares = memo(({ title }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h6 className=\"card-header\">{title}</h6>\r\n    </div>\r\n  );\r\n});\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListFamiliares } from \"./ListFamiliares\";\r\n\r\nconst ServiciosPlanFamiliar = memo(() => {\r\n  const url = `https://pruebachatbots.herokuapp.com/api/plan/servicio/familiar`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>Planes Familiares</h3>\r\n          </li>\r\n\r\n          {data.data.map((servicios) => {\r\n            return (\r\n              <div key={servicios.id} className=\"card mb-3\">\r\n                <h4 className=\"card-header\">{servicios.descripcion}</h4>\r\n                {servicios.plan_servicios.map((servicio) => {\r\n                  const {\r\n                    id,\r\n                    servicio: { descripcion },\r\n                  } = servicio;\r\n                  return (\r\n                    <li key={id} className=\"list-group-item\">\r\n                      <ListFamiliares title={descripcion} />\r\n                    </li>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>No hay planes familiares disponibles</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default ServiciosPlanFamiliar;\r\n","import React, { memo } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport { ListServicios } from \"./ListServicios\";\r\nimport { clasificacion } from \"../../helpers/clasificacion\";\r\n\r\nconst TipoServicio = memo(({\r\n  steps: {\r\n    usuario: { value },\r\n  },\r\n}) => {\r\n  const query = clasificacion(value);\r\n  const url = `https://pruebachatbots.herokuapp.com/api/servicio/${query}`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n        <div\r\n          className=\"spinner-border text-primary\"\r\n          style={{ width: \"3rem\", height: \"3rem\" }}\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n      ) : data.data.length ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>{`Servicios ${query}`}</h3>\r\n          </li>\r\n          {data.data[0].tipo_vs_servicios.map((v) => {\r\n            const {\r\n              id,\r\n              servicio: { descripcion, img },\r\n            } = v;\r\n            return (\r\n              <li key={id} className=\"list-group-item\">\r\n                <ListServicios title={descripcion} img={img} />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li key=\"servicios\" className=\"list-group-item\">\r\n            <h3>Este no es un tipo de servicio disponible</h3>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default TipoServicio;\r\n","// Importaciones Nativas\r\nimport React, { useContext } from \"react\";\r\nimport ChatBot from \"react-simple-chatbot\";\r\nimport { ThemeProvider } from \"styled-components\";\r\n// Importaciones Componentes\r\nimport { UserContext } from \"../../context/UserContext\";\r\nimport { clasificacion } from \"../../helpers/clasificacion\";\r\nimport { useFetch } from \"../../hooks/useFectch\";\r\nimport Deudas from \"../mensualidad/Deudas\";\r\nimport FirstMes from \"../mensualidad/FirstMes\";\r\nimport LastMes from \"../mensualidad/LastMes\";\r\nimport Mensualidad from \"../mensualidad/Mensualidad\";\r\nimport Planes from \"../plan/Planes\";\r\nimport PlanesFamiliares from \"../plan/PlanFamiliar\";\r\nimport PrecioPlan from \"../plan/PrecioPlan\";\r\nimport PrecioServicio from \"../Servicios/PrecioServicio\";\r\nimport PrecioServicioOne from \"../Servicios/PrecioServicioOne\";\r\nimport Servicios from \"../Servicios\";\r\nimport ServiciosPlan from \"../plan/ServiciosPlan\";\r\nimport ServiciosPlanFamiliar from \"../plan/ServicioPlanFamiliar\";\r\nimport TipoServicio from \"../Servicios/TipoServicio\";\r\n// Estilos del chatBot\r\nconst theme = {\r\n  background: \"#F5F6F2\",\r\n  fontFamily: \"Segoe UI\",\r\n  headerBgColor: \"#06A7E8\",\r\n  headerFontColor: \"#fff\",\r\n  headerFontSize: \"20px\",\r\n  botBubbleColor: \"#D8DADA\",\r\n  botFontColor: \"#000\",\r\n  userBubbleColor: \"#06A7E8\",\r\n  userFontColor: \"#fff\",\r\n};\r\n// Creando componente que retorna el chatBot\r\nexport const ChatbotScreen = () => {\r\n// Obteniendo los datos del usuario al momento de ser logueado los cuales se almacenan en el contexto de la APP\r\n  const {\r\n    user: { cedula },\r\n  } = useContext(UserContext);\r\n// Haciendo la peticion a la BD basada en la cedula que el usuario registro  \r\n  const url = `https://pruebachatbots.herokuapp.com/api/usuario/${cedula}`;\r\n  const { loading, data } = useFetch(url);\r\n\r\n  return (\r\n    // Componente que arropa a el chatBot para aplicarle el diseño.\r\n    <ThemeProvider theme={theme}>\r\n      {/* En caso de que aun no se haya obtenido la data de la BD muestra un Spinner de carga y cuando se obtiene los datos ya muestra el chatBot */}\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            style={{ width: \"10rem\", height: \"10rem\" }}\r\n            role=\"status\"\r\n          >\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n        // En caso de que no tenga internet le mostrara una alerta al usuario\r\n      ) : !navigator.onLine ? (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          No tiene conexion a Internet!\r\n        </div>\r\n      ) : (\r\n        // Componente del chatBot\r\n        <ChatBot\r\n          headerTitle=\"Asistente de ventas\"\r\n          placeholder=\"Escriba su mensaje\"\r\n          botAvatar=\"https://support.upwork.com/hc/article_attachments/360040474034/chatbot-data.png\"\r\n          userAvatar=\"https://microhealth.com/assets/images/illustrations/personal-user-illustration-@2x.png\"\r\n          recognitionEnable={true}\r\n          floating={true}\r\n          recognitionLang=\"es\"\r\n          // Aqui se coloca el Json, el cual tendra toda las entradas y respuestas para el usuario\r\n          steps={[\r\n            {\r\n              id: \"1\",\r\n              message: `Hola! ${data.data.nombre} ${data.data.apellido}, ¿En qué te puedo ayudar?`,\r\n              trigger: \"usuario\",\r\n            },\r\n            {\r\n              // Este es el objeto que se encarga de pedirle los datos al usuario, luego procesar lo que el usuario le envie y devolver una clave mediante el metodo de Regresion Logistica\r\n              id: \"usuario\",\r\n              user: true,\r\n              trigger: ({ value, steps }) => clasificacion(value),\r\n            },\r\n            {\r\n              // Muesta los servicios disponible\r\n              id: \"servicio\",\r\n              component: <Servicios />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta los servicios disponible\r\n              id: \"independiente\",\r\n              component: <TipoServicio />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta los planes\r\n              id: \"plan\",\r\n              component: <Planes />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta los servicios del plane premium\r\n              id: \"premium\",\r\n              component: <ServiciosPlan />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta los servicios del plane basico\r\n              id: \"basico\",\r\n              component: <ServiciosPlan />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta el precio del plane premium\r\n              id: \"precio/premium\",\r\n              component: <PrecioPlan />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta el precio del plane basico\r\n              id: \"precio/basico\",\r\n              component: <PrecioPlan />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta los planes familiares\r\n              id: \"planes-familiares\",\r\n              component: <PlanesFamiliares />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta los servicios de los planes familiares\r\n              id: \"planes-familiares-servicios\",\r\n              component: <ServiciosPlanFamiliar />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta los precios servicios\r\n              id: \"precio-servicios\",\r\n              component: <PrecioServicio />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta los pagos realizados del usuarios autenticado\r\n              id: \"movimientos\",\r\n              component: <Mensualidad />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta el primer pago realizados del usuarios autenticado\r\n              id: \"primer-pago\",\r\n              component: <FirstMes />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta el ultimp pago realizados del usuarios autenticado\r\n              id: \"ultimo-pago\",\r\n              component: <LastMes />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // Muesta cuantos meses debe el usuarios autenticado\r\n              id: \"meses-pago\",\r\n              component: <Deudas />,\r\n              trigger: \"sugerencia2\",\r\n            },\r\n            {\r\n              // En caso de que el usuario dijite algo que el chatBot no pueda contestar le muestra este mensaje\r\n              id: \"no-existe\",\r\n              message:\r\n                \"La pregunta realizada no puede ser contestada por este ChatBot, favor llamar 809-612-3445 para mas detalles\",\r\n              trigger: \"consultar\",\r\n            },\r\n            {\r\n              id: \"consultar\",\r\n              message:\r\n                \"Estas son algunas sugerencias de lo que le puedo contestar\",\r\n              trigger: \"sugerencias\",\r\n            },\r\n            {\r\n              // Sugerencias para el usuario\r\n              id: \"sugerencias\",\r\n              options: [\r\n                { value: 1, label: \"Servicio\", trigger: \"servicio\" },\r\n                { value: 2, label: \"Planes\", trigger: \"plan\" },\r\n                {\r\n                  value: 3,\r\n                  label: \"Precio de los servicios\",\r\n                  trigger: \"precio-servicios\",\r\n                },\r\n                {\r\n                  value: 4,\r\n                  label: \"Planes familiares\",\r\n                  trigger: \"planes-familiares\",\r\n                },\r\n                { value: 5, label: \"Pagos realizados\", trigger: \"movimientos\" },\r\n                { value: 6, label: \"Otra pregunta...\", trigger: \"otra\" },\r\n                { value: 7, label: \"Terminar conversacion\", trigger: \"end\" },\r\n              ],\r\n            },\r\n            {\r\n              id: \"sugerencia2\",\r\n              message: \"En que otra cosa le puedo ayudar?\",\r\n              trigger: \"usuario\",\r\n            },\r\n            {\r\n              id: \"otra\",\r\n              message: \"Introduzca su pregunta en la caja de texto.\",\r\n              trigger: \"usuario\",\r\n            },\r\n            {\r\n              // Final de la conversacion\r\n              id: \"end\",\r\n              message: \"Gracias por charlar!\",\r\n              end: true,\r\n            },\r\n          ]}\r\n        />\r\n      )}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Navbar } from \"../components/ui/Navbar\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { ChatbotScreen } from \"../components/chatbot/ChatbotScreen\";\r\n\r\nexport const DasboardRoutes = () => {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"container mt-2\">\r\n        <Switch>\r\n          <Route exact path=\"/chatbot\" component={ChatbotScreen} />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { LoginScreen } from \"../components/login/LoginScreen\";\r\nimport { DasboardRoutes } from \"./DasboardRoutes\";\r\n// Sistema de rutas principal\r\nexport const AppRouter = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={LoginScreen} />\r\n          <Route path=\"/chatbot\" component={DasboardRoutes} />\r\n          {/* Sistema de rutas hijas */}\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AppRouter } from \"./routers/AppRouter\";\r\nimport { UserContext } from \"./context/UserContext\";\r\n\r\nexport const App = () => {\r\n  const [user, setUser] = useState({\r\n    cedula: \"40212345667\",\r\n    password: \"qweqwewe\"\r\n  });\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      <AppRouter />\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}